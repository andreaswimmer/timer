<!DOCTYPE html>
<html lang="de">
  <head>
    <title>Antigen Timer</title>
    <link rel="icon" type="image/x-icon" href="favicon.png?1">
    <style>
      a {
        color: inherit;
      }
      .trash {
        background-color: transparent;
        color: white;
        border: 0px;
        border-radius: 4px;
      }
      /*Begin background gradient*/
      .background-gradient {
        background: #c31432; /* fallback for old browsers */
        background: -webkit-linear-gradient(to right, #c31432, #240b36); /* Chrome 10-25, Safari 5.1-6 */
        background:         linear-gradient(to right, #c31432, #240b36); /* W3C, IE 10+, Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
      }
      body {
        margin: 0px;
        color: #ffffff;     
        text-shadow: /* https://stackoverflow.com/questions/26634201/add-stroke-around-text-on-the-outside-with-css */
            -1px -1px 0 #000,
             0   -1px 0 #000,
             1px -1px 0 #000,
             1px  0   0 #000,
             1px  1px 0 #000,
             0    1px 0 #000,
            -1px  1px 0 #000,
            -1px  0   0 #000;
        
      }
      /*End background gradient*/
      .styled-table {
        border-collapse: collapse;
      }
      /*For icons in links*/
      .text-sized { 
        height: 1em;
      }
      .styled-table tbody tr:nth-of-type(odd) {
        background-color: #5d001e;
      }
      .styled-table tbody tr:nth-of-type(even) {
        background-color: #50125000;
      }
      .trash {
        color: #ffffff;
        background-color: #000000;
      }
      td, th {
        text-align: left;
        padding: 5px;
      }
      .footer {
        font-size:11pt;
      }
      input[type=number]::-webkit-inner-spin-button { /* Always display up/down button in chrome: https://stackoverflow.com/questions/25194631/is-it-possible-to-always-show-up-down-arrows-for-input-number */
        opacity: 1
      }
    </style>
  </head>
  <body class="header background-gradient">
    <div style="position: fixed; z-index: -99; width: 100%; height: 100%">
      <iframe style="height:100%;width:100%;" allow="autoplay" referrerpolicy="no-referrer" sandbox="allow-scripts allow-same-origin"
        src="https://www.youtube-nocookie.com/embed/t_S_cN2re4g?autoplay=1&controls=0&showinfo=0&autohide=1&mute=1&modestbranding=1&loop=1"></iframe>
    </div>
    <div style="position: fixed;  width: 100%; height: 100%"> <!-- div over the video to block clicks -->
      <table style="width: 100%; ">
        <tbody style="display: grid; place-items: center;">
          <tr style="font-size: 50pt;">
            <td id="vergangenheit_label">Entwertbare Tests&nbsp;&nbsp;&nbsp;</td>
            <td id="vergangenheit">00:00</td>
          </tr>
          <tr style="font-size: 55pt; font-weight: bold; ">
            <td>Aktuelle Uhrzeit&nbsp;&nbsp;&nbsp;</td>
            <td><span id="aktuell">99:99</span>
          </tr>
        </tbody>
      </table>
      <br/>
      <div style="transform: translateX(1%)">
        <input id="chosenDifference" type="number" style="width:3em" value="15" onblur="thereMustAlwaysBeAValueInChosenDifference()">
        <label for="chosenDifference">Minuten</label>
        <button onclick="startTimer()">Timer Starten</button>
        
        <table class="styled-table">
          <thead>
            <tr>
              <th>Start</th>
              <th>Verbleibend</th>
              <th>Ende</th>
            </tr>
          </thead>
          <tbody id="timers"></tbody>
        </table>
      </div>

      <script>
        function sleep(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
        }

        function thereMustAlwaysBeAValueInChosenDifference() {
          let parsed = parseInt(chosenDifference.value, 10);
          if ((chosenDifference.value == '') || isNaN(parsed) || (parsed == 0)) {
            chosenDifference.value = '15';
            parsed = 15;
          }
          if (parsed < 0 ) {
            document.getElementById('vergangenheit_label').innerHTML = "Zu schreibende Zeit&nbsp;&nbsp;&nbsp;";
          } else {
            document.getElementById('vergangenheit_label').innerHTML = "Entwertbare Tests&nbsp;&nbsp;&nbsp;";
          }
          return parsed * 60 * 1000;

        }

        function deleteButton(id) {
          document.getElementById(id).remove();
        }

        var chime = new Audio("chime.mp3");
        chime.volume = 1;

        let nextId = 0;
        const timers = document.getElementById('timers');

        function startTimer() {
          const current = new Date();
          const row = timers.insertRow(-1);
          const id = "row" + nextId++;
          row.id = id;
          row.data = new Date(current.getTime() + Math.abs(thereMustAlwaysBeAValueInChosenDifference()));
          row.class = 'active-row';
          const cell0 = row.insertCell(0).innerText = current.toLocaleTimeString();
          const cell1 = row.insertCell(1);
          const cell2 = row.insertCell(2).innerText = row.data.toLocaleTimeString();
          cell0.class = 'active-row';
          const cell3 = row.insertCell(3).innerHTML = `<button class="trash" onclick='deleteButton("${id}")'>🗑</button>`;
          updateRow(row);
        }

        function remain(end) {
          const current = new Date();
          const diff = Math.floor((end - current) / 1000);
          const minutes = Math.ceil (diff / 60);
          const seconds = Math.floor(diff % 60);

          if (minutes > 1) {
            return `${minutes} Minuten`;
          } else if (seconds > 0) {
          if(seconds == 1) {
            chime.play();
          }
            return `${seconds} Sekunde${seconds>1 ? "n" : ""}`;
          } else {
            return '<i>Fertig</i>';
          }
        }

        function updateRow(row) {
          row.cells[1].innerHTML = remain(row.data);
        }


        async function main() {
          const aktuell = document.getElementById('aktuell');
          const vergangenheit = document.getElementById('vergangenheit');
          while (true) {
            const currentTime = new Date();
            aktuell.innerText = currentTime.toLocaleTimeString();
            vergangenheit.innerText = new Date(currentTime - thereMustAlwaysBeAValueInChosenDifference()).toLocaleTimeString();
            for (var row of timers.rows) {
              updateRow(row);
            }
            await sleep(500);
            }
        }

        main();
      </script>
      <div class="footer" style="position: absolute; bottom: 10px; right: 15px; text-align:right">
        <a href="https://www.youtube.com/watch?v=t_S_cN2re4g" target="_blank">Deep Ocean</a> by <a href="https://www.youtube.com/c/bbcearth" target="_blank">BBC Earth</a> hosted on <a href="https://youtube.com" target="_blank">YouTube</a><br>
        Source code available at <a href="https://github.com/andreaswimmer/timer" target="_blank">github.com/andreaswimmer/timer</a><br>
        <a href="https://freesound.org/people/FoolBoyMedia/sounds/352661/" target="_blank">Complete Chime</a> by <a href="https://www.foolboymedia.co.uk/" target="_blank">FoolBoyMedia</a> is licensed under <a href="https://creativecommons.org/licenses/by/3.0/" target="_blank">CC BY 3.0</a><br>
      </div>
    </div>
  </body>
</html>
